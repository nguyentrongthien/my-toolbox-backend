<?php

namespace Tests\Feature;

use App\Domains\Checklist\Actions\AddItemToChecklistAction;
use App\Domains\Checklist\Actions\CreateNewChecklistAction;
use App\Domains\Checklist\Actions\UpdateChecklistAction;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ChecklistTest extends TestCase
{
    use RefreshDatabase;

    private User $user1, $user2;
    private string $checklist_name = 'Test List';
    private string $item_title = 'Test Item';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user1 = User::factory()->create();
        $this->user2 = User::factory()->create();
    }

    public function test_checklist_can_be_created(): void
    {
        $checklist = CreateNewChecklistAction::run($this->user1, $this->checklist_name);

        $this->assertDatabaseHas('checklists', [
            'id' => $checklist->id,
            'name' => $this->checklist_name,
        ]);
    }

    public function test_checklist_cannot_be_created_by_guest(): void
    {
        $response = $this
            ->post('/api/v1/checklists', ['name' => $this->checklist_name], ['Accept' => 'application/json']);

        $response->assertStatus(401);

        $this->assertDatabaseMissing('checklists', [
            'name' => $this->checklist_name,
        ]);
    }

    public function test_checklist_can_be_created_by_authenticated_user(): void
    {
        $response = $this->actingAs($this->user1)
            ->post('/api/v1/checklists', ['name' => $this->checklist_name], ['Accept' => 'application/json']);

        $response->assertOk();

        $this->assertDatabaseHas('checklists', [
            'name' => $this->checklist_name,
        ]);
    }

    public function test_checklist_can_be_updated(): void
    {
        $checklist_name_changed = $this->checklist_name . ' changed';

        $checklist = CreateNewChecklistAction::run($this->user1, $this->checklist_name);

        $this->assertDatabaseHas('checklists', [
            'id' => $checklist->id,
            'name' => $this->checklist_name,
        ]);

        $mod_checklist = UpdateChecklistAction::run(
            $checklist,
            $checklist_name_changed
        );

        $this->assertDatabaseHas('checklists', [
            'id' => $checklist->id,
            'name' => $checklist_name_changed,
        ]);

        $this->assertEquals($checklist->id, $mod_checklist->id);
    }

    public function test_checklist_cannot_be_updated_by_guest(): void
    {
        $checklist_name_changed = $this->checklist_name . ' changed';

        $checklist = CreateNewChecklistAction::run($this->user1, $this->checklist_name);

        $response = $this
            ->put("/api/v1/checklists/{$checklist->id}", ['name' => $checklist_name_changed], ['Accept' => 'application/json']);

        $response->assertStatus(401);

        $this->assertDatabaseHas('checklists', [
            'id' => $checklist->id,
            'name' => $this->checklist_name,
        ]);

        $this->assertDatabaseMissing('checklists', [
            'id' => $checklist->id,
            'name' => $checklist_name_changed,
        ]);
    }

    public function test_checklist_cannot_be_updated_by_another_user(): void
    {
        $checklist_name_changed = $this->checklist_name . ' changed';

        $checklist = CreateNewChecklistAction::run($this->user1, $this->checklist_name);

        $response = $this->actingAs($this->user2)
            ->put("/api/v1/checklists/{$checklist->id}", ['name' => $checklist_name_changed], ['Accept' => 'application/json']);

        $response->assertStatus(403);

        $this->assertDatabaseHas('checklists', [
            'id' => $checklist->id,
            'name' => $this->checklist_name,
        ]);

        $this->assertDatabaseMissing('checklists', [
            'id' => $checklist->id,
            'name' => $checklist_name_changed,
        ]);
    }

    public function test_checklist_can_be_updated_by_owner(): void
    {
        $checklist_name_changed = $this->checklist_name . ' changed';

        $checklist = CreateNewChecklistAction::run($this->user1, $this->checklist_name);

        $response = $this->actingAs($this->user1)
            ->put("/api/v1/checklists/{$checklist->id}", ['name' => $checklist_name_changed], ['Accept' => 'application/json']);

        $response->assertOk();

        $this->assertDatabaseHas('checklists', [
            'id' => $checklist->id,
            'name' => $checklist_name_changed,
        ]);
    }

    public function test_checklist_item_can_be_added(): void
    {
        $test_item_title = 'Test Item 1';
        $checklist = CreateNewChecklistAction::run($this->user1, $this->checklist_name);

        $this->assertDatabaseHas('checklists', [
            'id' => $checklist->id,
            'name' => $this->checklist_name,
        ]);

        $updated_checklist = AddItemToChecklistAction::run($checklist, $test_item_title);

        $this->assertDatabaseHas('checklist_items', [
            'checklist_id' => $checklist->id,
            'title' => $test_item_title,
        ]);

        $this->assertEquals(1, $updated_checklist->items()->count());
    }

    public function test_checklist_item_can_be_added_by_owner(): void
    {
        $checklist = CreateNewChecklistAction::run($this->user1, $this->checklist_name);

        $response = $this->actingAs($this->user1)
            ->post("/api/v1/checklists/{$checklist->id}/items", ['title' => $this->item_title], ['Accept' => 'application/json']);

        $response->assertOk();

        $this->assertDatabaseHas('checklists', [
            'id' => $checklist->id,
            'name' => $this->checklist_name,
        ]);

        $this->assertDatabaseHas('checklist_items', [
            'checklist_id' => $checklist->id,
            'title' => $this->item_title,
        ]);

        $response->assertJsonCount(1, 'checklist.items');

        $this->assertEquals($this->item_title, $response->json('checklist.items.0.title'));
    }

    public function test_checklist_item_can_be_updated_by_owner(): void
    {
        $checklist = CreateNewChecklistAction::run($this->user1, $this->checklist_name);

        $response1 = $this->actingAs($this->user1)
            ->post("/api/v1/checklists/{$checklist->id}/items", ['title' => $this->item_title], ['Accept' => 'application/json']);

        $response1->assertOk();

        $response2 = $this->actingAs($this->user1)
            ->put("/api/v1/checklists/{$checklist->id}/items/{$response1->json('checklist.items.0.id')}",
                ['title' => 'New Test Title'],
                ['Accept' => 'application/json']);

        $response2->assertOk();

        $response2->assertJsonCount(1, 'checklist.items');

        $this->assertEquals('New Test Title', $response2->json('checklist.items.0.title'));

        $this->assertDatabaseHas('checklist_items', [
            'checklist_id' => $checklist->id,
            'title' => 'New Test Title',
        ]);
    }

    public function test_checklist_item_can_be_deleted_by_owner(): void
    {
        $checklist = CreateNewChecklistAction::run($this->user1, $this->checklist_name);

        $response1 = $this->actingAs($this->user1)
            ->post("/api/v1/checklists/{$checklist->id}/items", ['title' => $this->item_title], ['Accept' => 'application/json']);

        $response1->assertOk();

        $this->assertDatabaseCount('checklists', 1);

        $this->assertDatabaseCount('checklist_items', 1);

        $response2 = $this->actingAs($this->user1)
            ->delete("/api/v1/checklists/{$checklist->id}/items/{$response1->json('checklist.items.0.id')}");

        $response2->assertOk();

        $this->assertDatabaseCount('checklists', 1);

        $this->assertDatabaseCount('checklist_items', 0);
    }

    public function test_checklist_can_be_deleted_by_owner(): void
    {
        $checklist = CreateNewChecklistAction::run($this->user1, $this->checklist_name);

        $response1 = $this->actingAs($this->user1)
            ->post("/api/v1/checklists/{$checklist->id}/items", ['title' => $this->item_title], ['Accept' => 'application/json']);

        $response1->assertOk();

        $this->assertDatabaseCount('checklists', 1);

        $this->assertDatabaseCount('checklist_items', 1);

        $response2 = $this->actingAs($this->user1)
            ->delete("/api/v1/checklists/{$checklist->id}");

        $response2->assertOk();

        $this->assertDatabaseCount('checklists', 0);

        $this->assertDatabaseCount('checklist_items', 0);

        $this->assertEquals($checklist->id, $response2->json('checklist_id'));
    }
}
